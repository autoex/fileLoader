{"version":3,"sources":["upload.js","app.js"],"names":["bytesToSize","bytes","sizes","i","parseInt","Math","floor","log","round","pow","upload","selector","options","files","input","document","querySelector","previewBox","createElement","classList","add","multi","multiple","accept","Array","isArray","setAttribute","join","openButton","textContent","insertAdjacentElement","triggerInput","click","changeHandler","event","target","innerHTML","from","console","forEach","file","type","match","reader","FileReader","onload","ev","insertAdjacentHTML","name","result","size","readAsDataURL","removeHandler","dataset","filter","block","closest","setTimeout","remove","addEventListener"],"mappings":"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","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["function bytesToSize(bytes) {\r\n    let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (!bytes) return '0 Byte';\r\n    let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}\r\n\r\n\r\nexport function upload(selector, options = {}) {\r\n    let files = [];\r\n\r\n    const input = document.querySelector(selector);\r\n    const previewBox = document.createElement('div');\r\n    previewBox.classList.add('previewBox');\r\n\r\n    if (options.multi) {\r\n        input.multiple = true;\r\n        // input.setAttribute('multiple', true)\r\n    }\r\n\r\n    if (options.accept && Array.isArray(options.accept)) {\r\n\r\n        input.setAttribute('accept', options.accept.join(', '))\r\n\r\n    }\r\n\r\n    const openButton = document.createElement('button');\r\n    openButton.classList.add('btn');\r\n    openButton.textContent = 'Open';\r\n\r\n    input.insertAdjacentElement(\"afterend\", openButton);\r\n\r\n    const triggerInput = () => input.click();\r\n    const changeHandler = event => {\r\n\r\n        if (!event.target.files) {\r\n            return\r\n        }\r\n        openButton.insertAdjacentElement('afterend', previewBox);\r\n        previewBox.innerHTML = '';\r\n        files = Array.from(event.target.files);\r\n        console.log(Array.isArray(files));\r\n\r\n        files.forEach(file => {\r\n\r\n                if (!file.type.match('image')) return;\r\n\r\n\r\n                // console.log(file);\r\n\r\n\r\n                const reader = new FileReader();\r\n\r\n                reader.onload = ev => {\r\n                    console.log(ev);\r\n                    // previewBox.innerHTML += `<img src=\"${ev.target.result}\" />`;\r\n                    previewBox.insertAdjacentHTML('afterbegin', `\r\n                            <div class=\"preview-img\">\r\n                            <div class=\"preview-remove\" data-name=\"${file.name}\">&times;</div>\r\n                            <img src=\"${ev.target.result}\" />\r\n                            <div class=\"preview-info\"><span>Size:</span> ${bytesToSize(file.size)}</div>\r\n                            </div>`)\r\n                    // input.insertAdjacentHTML('afterend', `<img src=\"${ev.target.result}\" />`)\r\n                };\r\n\r\n\r\n                reader.readAsDataURL(file);\r\n            }\r\n        )\r\n    };\r\n\r\n    let removeHandler = event => {\r\n        if (!event.target.dataset.name) return;\r\n\r\n        const {name} = event.target.dataset;\r\n        files = files.filter(file => file.name !== name);\r\n\r\n\r\n\r\n        let block = document.querySelector(`[data-name=\"${name}\"]`).closest('.preview-img');\r\n\r\n        block.classList.add('preview-removing');\r\n        setTimeout(()=>block.remove(), 300)\r\n\r\n\r\n        console.log(block)\r\n\r\n\r\n\r\n\r\n        console.log(name);\r\n        console.log(files);\r\n    }\r\n\r\n    openButton.addEventListener('click', triggerInput);\r\n\r\n    input.addEventListener('change', changeHandler);\r\n\r\n    previewBox.addEventListener('click', removeHandler)\r\n\r\n\r\n}","import {upload} from './upload.js'\r\n\r\nupload('#loadFile', {\r\n    multi: true,\r\n    accept: ['.png', '.jpg', '.jpeg', '.gif']\r\n})\r\n\r\n"]}